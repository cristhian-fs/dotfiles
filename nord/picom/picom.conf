
# ROUNDED CORNERS
corner-radius = 12;

# uncommented for square notification box
# rounded-corners-exclude = [
  # "class_g = 'Dunst'"
# ];


# SHADOWS
shadow =false;
shadow-radius = 5; #blur radius
shadow-opacity = 0.5;

shadow-offset-x = 0;
shadow-offset-y = 0;

# shadow-color = "#000000"
# shadow-exclude = [];


# FADING
fading = true;
fade-in-step = 0.03;
fade-out-step = 0.03;
fade-delta = 3


# backends: `xrender`, `glx`, `egl` or `xr_glx_hybrid`
backend = "glx";

use-damage = false;
dithered-present = false;
vsync = true;

# mark-wmwin-focused = true;

# mark-ovredir-focused = true;

detect-rounded-corners = true;
detect-client-opacity = true;
use-ewmh-active-win = true
detect-transient = true;
#glx-no-stencil = true
use-damage = false;
log-level = "warn";


# WINDOW RULES
rules = (
# { match = "name = 'i3'"; opacity = 1; },
	{ match = "focused "; opacity = 0.8; },
	{ match = "!focused"; opacity = 0.75; },
	{ match = "tooltip"; fade = true; shadow = true; opacity = 0.5; focus = true; full-shadow = false; },
	{ match = "popup_menu"; opacity = 0.8; },
	{ match = "dropdown_menu"; opacity = 0.8; },
  { match = "fullscreen "; opacity = 1; },)

# BLURRING
# methods: none, gaussian, box, kernel (define custom kernel), dual_kawase
blur:
{
  method = "dual_kawase";
  size = 1;
 strength = 10;
# default deviation is 0.84
# deviation = 25;
};

# semi-transparent
blur-background = false

# blur-background-frame = true
# Use fixed blur strength rather than adjusting according to window opacity.
blur-background-fixed = true

# set custom blur kernel (method to kernel), preset examples:
# blur-kern = "3x3box";
# blur-kern = "5x5gaussian";


# picom -b to daemonize

#################################
#     Animation Settings        #
#################################

animations = (
  {
    triggers = ["close"];
    opacity = {
      curve = "cubic-bezier(0,0,1,-0.28)";
      duration = .2;
      start = "window-raw-opacity-before";
      end = 0;
    };
    blur-opacity = "opacity";
    shadow-opacity = "opacity";
    offset-x = "(1 - scale-x) / 2 * window-width";
    offset-y = "(1 - scale-y) / 2 * window-height";
    scale-x = {
      curve = "cubic-bezier(0,0,1,-0.28)";
      duration = .2;
      start = 1;
      end = .5;
    };
    scale-y = "scale-x";
    shadow-scale-x = "scale-x";
    shadow-scale-y = "scale-y";
    shadow-offset-x = "offset-x";
    shadow-offset-y = "offset-y";
  },
  {
    triggers = ["open"];
    opacity = {
      curve = "cubic-bezier(0,1.28,1,1)";
      duration = .2;
      start = 0;
      end = "window-raw-opacity";
    }
    blur-opacity = "opacity";
    shadow-opacity = "opacity";
    offset-x = "(1 - scale-x) / 2 * window-width";
    offset-y = "(1 - scale-y) / 2 * window-height";
    scale-x = {
      curve = "cubic-bezier(0,1.28,1,1)";
      duration = .2;
      start = .5;
      end = 1;
    };
    scale-y = "scale-x";
    shadow-scale-x = "scale-x";
    shadow-scale-y = "scale-y";
    shadow-offset-x = "offset-x";
    shadow-offset-y = "offset-y";
  },
  {
    triggers = ["geometry"]
    scale-x = {
      curve = "cubic-bezier(0,1.28,1,1)";
      duration = 0.22;
      start = "window-width-before / window-width";
      end = 1;
    }
    scale-y = {
      curve = "cubic-bezier(0,1.28,1,1)";
      duration = 0.22;
      start = "window-height-before / window-height";
      end = 1;
    }
    offset-x = {
      curve = "cubic-bezier(0,1.28,1,1)";
      duration = 0.22;
      start = "window-x-before - window-x";
      end = 0;
    }
    offset-y = {
      curve = "cubic-bezier(0,1.28,1,1)";
      duration = 0.22;
      start = "window-y-before - window-y";
      end = 0;
    }

    shadow-scale-x = "scale-x";
    shadow-scale-y = "scale-y";
    shadow-offset-x = "offset-x";
    shadow-offset-y = "offset-y";
  }
)
